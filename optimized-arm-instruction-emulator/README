An optimized AArch64 instruction emulator. 10x faster.

Optimizations:
    Arrays instead of maps to represent memory. Hashing costs a lot of time.
    32-bit instead of 8-bit memory. Less memory accesses, especially during instruction fetching
    Caching closures after instruction is decoded. Reduces repetitive bit extraction logic.
    Switch statement instead of if-else block for instruction decoding
    Inline helper functions and function templates for 32/64-bit versions


Works with the following instructions:
ADD (immediate)
ADRP
MOV (wide imm)
LDR (imm unsign)
LDRB (imm pre)
STRB (imm uns)
CBNZ
CBZ
SUBS (imm)
SUB (imm)
ORR (shft reg)
B
AND (immediate)
UBFM (imm)
MADD
ADD (shifted reg)
LDRB (imm uns)
STR (imm uns)
MOVN
B.NE
SUB
CBZ


Files:
~~~~~~~~~~~~~~~~

    - sample/*.c     a test written in C
    - sample/*.s     a test written in assembly
    - sample/*.S     a test written in assembly
    - sample/*       a test executable
    - sample/*.disas a test disassembly
    - *.ok           the expected output from running the test
    - *.out          the actual output produced when running the test


To compile the emulator:
~~~~~~~~~~~~~~~~~~~~~~~~

    make


To compile the tests:
~~~~~~~~~~~~~~~~~~~~~

    (cd sample; make)

To run tests:
~~~~~~~~~~~~~

    make test

To make the output less noisy:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    make -s test

To debug with gdb
~~~~~~~~~~~~~~~~~

    make
    gdb ./arm
    (gdb) run sample/t0
