#include "cache.h"

bool lru_tree[LLC_SET][LLC_WAY - 1];

// initialize replacement state
void CACHE::llc_initialize_replacement()
{
    for(int i = 0; i < LLC_SET; i++) {
        for(int j = 0; j < LLC_WAY - 1; j++) {
            lru_tree[i][j] = 0;
        }
    }
}

void promote (uint32_t set, uint32_t way) {
    int node = 0;
    for (int i = 3; i >= 0; i--) {
        if (way / (1 << i)) {
            lru_tree[set][node] = false;
            node = 2 * node + 2;
        } else {
            lru_tree[set][node] = true;
            node = 2 * node + 1;
        }
        way = way % (1 << i);
    }
}


// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    int index = 0;
    while(index < LLC_WAY - 1) {
        if(lru_tree[set][index]) {
            lru_tree[set][index] = false;
            index = 2 * index + 2;
        } else {
            lru_tree[set][index] = true;
            index = 2 * index + 1;
        }
    }
    index -= 15;
    return index;
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit, uint64_t latency, uint64_t effective_latency)
{
    string TYPE_NAME;
    if (type == LOAD)
        TYPE_NAME = "LOAD";
    else if (type == RFO)
        TYPE_NAME = "RFO";
    else if (type == PREFETCH)
        TYPE_NAME = "PF";
    else if (type == WRITEBACK)
        TYPE_NAME = "WB";
    else
        assert(0);

    if (hit)
        TYPE_NAME += "_HIT";
    else
        TYPE_NAME += "_MISS";

    if ((type == WRITEBACK) && ip)
        assert(0);

    // uncomment this line to see the LLC accesses
    // cout << "CPU: " << cpu << "  LLC " << setw(9) << TYPE_NAME << " set: " << setw(5) << set << " way: " << setw(2) << way;

    // baseline LRU
    if (hit && (type == WRITEBACK)) // writeback hit does not update LRU state
        return;

    if (hit) {
        promote(set, way);    
    }

    //return lru_update(set, way);
}

void CACHE::llc_replacement_final_stats()
{

}
